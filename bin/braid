#!/usr/bin/env ruby

# I haven't found a clean way to get Sorbet to check this file since the name
# doesn't end in `.rb`.  (If I add `--file bin/braid` to `sorbet/config`, then
# the Sorbet language server doesn't support using Watchman.)  So move all the
# interesting code to `lib/braid/main.rb` and leave this as a launcher that
# doesn't have any code worth type checking. ~ Matt 2022-04-02

# TODO: We probably shouldn't be messing with the load path here; most Ruby gems
# don't.  When `bin/braid` is run via RubyGems or Bundler, those systems are
# responsible for ensuring that we load the correct versions of all gems,
# including Braid itself.  AFAIK, the load path adjustment here serves to ensure
# that if the user runs `bin/braid` directly during development, it at least
# uses the corresponding `lib/braid`, but that doesn't ensure we use the correct
# versions of dependencies.  It looks like this load-path manipulation dates
# back to b21eb2a3b96ab3e57971e390c1ae59b353b49d38, before Braid used Bundler.
# At this point, we should probably remove it and require the user to use a
# binstub generated by Bundler.

# Duplicated from Braid::Command.run. :(
def die(msg)
  puts "Braid: Error: #{msg}"
  exit(1)
end

# If we assume Ruby >= 2.0, we can use __dir__.
libdir = File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
unless File.exists?(libdir)
  # Don't silently fall back to a different globally installed copy of Braid!
  die "Cannot find Braid's 'lib' directory."
end
$LOAD_PATH.unshift(libdir)

require 'braid/main'
